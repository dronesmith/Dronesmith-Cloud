"use strict";var path=require("path"),mavlink=require("mavlink"),events=require("events"),dgram=require("dgram"),fs=require("fs");if(process.argv.length<3)console.log("mavsim generates simulated mavlink data by replaying recorded MAV file over and over.\nYou will need to use mavrecorder to actually generate flight data from a real mav--this is not a true SITL. The mavlink data is sent out as binary MAVLink packets."),console.log("	--file	Specify a mavlink file in binary format. Defaults to a file located in tools/"),console.log("	--port	Port to output to. Default is 14550."),console.log("	--loop	Number of times to loop. Default is once."),console.log("	--forever	Loops forever. Only way out is ctrl+x,c"),console.log("	--frequency	How many times a second you want a message. Default is 60Hz.");else{var mav=new mavlink(1,1);mav.on("ready",function(){var e,o=14550,r=1,a=!1,s=60;for(var t in process.argv){var l=process.argv[t];switch(l){case"--loop":r=process.argv[+t+1]||1;break;case"--port":o=+process.argv[+t+1]||14550;break;case"--file":e=path.resolve(process.argv[+t+1])||path.resolve(__dirname);break;case"--forever":a=!0;break;case"--frequency":s=process.argv[+t+1]||60}}var n=dgram.createSocket("udp4"),i=fs.readFileSync(e);console.log("Broadcasting on",o,"...");var c=r,v=0,f=setInterval(function(){if(v>=i.length){if(!(a||--c>0))return console.log("Completed."),n.close(),void clearInterval(f);console.log("Resetting flight."),v=0}try{new Date(i.readUIntBE(v,8));v+=8;var e=i[v+1]+v+8,r=JSON.parse(JSON.stringify(i.slice(v,e)));v=e}catch(s){console.log("[Error]",s),n.close(),process.exit(-1)}var t=Buffer(r);n.send(t,0,t.length,o,"localhost",function(e){e&&(console.log("[Error]",e),n.close(),process.exit(-1))})},Math.round(1/s*1e3))})}